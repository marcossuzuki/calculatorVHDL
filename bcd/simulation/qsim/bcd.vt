// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/06/2018 00:12:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bcd_vlg_sample_tst(
	binIN,
	sampler_tx
);
input [11:0] binIN;
output sampler_tx;

reg sample;
time current_time;
always @(binIN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bcd_vlg_check_tst (
	bcd_out,
	sampler_rx
);
input [15:0] bcd_out;
input sampler_rx;

reg [15:0] bcd_out_expected;

reg [15:0] bcd_out_prev;

reg [15:0] bcd_out_expected_prev;

reg [15:0] last_bcd_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd_out_prev = bcd_out;
end

// update expected /o prevs

always @(trigger)
begin
	bcd_out_expected_prev = bcd_out_expected;
end



// expected bcd_out[15]
initial
begin
	bcd_out_expected[15] = 1'bX;
end 

// expected bcd_out[14]
initial
begin
	bcd_out_expected[14] = 1'bX;
end 

// expected bcd_out[13]
initial
begin
	bcd_out_expected[13] = 1'bX;
end 

// expected bcd_out[12]
initial
begin
	bcd_out_expected[12] = 1'bX;
end 

// expected bcd_out[11]
initial
begin
	bcd_out_expected[11] = 1'bX;
end 

// expected bcd_out[10]
initial
begin
	bcd_out_expected[10] = 1'bX;
end 

// expected bcd_out[9]
initial
begin
	bcd_out_expected[9] = 1'bX;
end 

// expected bcd_out[8]
initial
begin
	bcd_out_expected[8] = 1'bX;
end 

// expected bcd_out[7]
initial
begin
	bcd_out_expected[7] = 1'bX;
end 

// expected bcd_out[6]
initial
begin
	bcd_out_expected[6] = 1'bX;
end 

// expected bcd_out[5]
initial
begin
	bcd_out_expected[5] = 1'bX;
end 

// expected bcd_out[4]
initial
begin
	bcd_out_expected[4] = 1'bX;
end 

// expected bcd_out[3]
initial
begin
	bcd_out_expected[3] = 1'bX;
end 

// expected bcd_out[2]
initial
begin
	bcd_out_expected[2] = 1'bX;
end 

// expected bcd_out[1]
initial
begin
	bcd_out_expected[1] = 1'bX;
end 

// expected bcd_out[0]
initial
begin
	bcd_out_expected[0] = 1'bX;
end 
// generate trigger
always @(bcd_out_expected or bcd_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd_out = %b | ",bcd_out_expected_prev);
	$display("| real bcd_out = %b | ",bcd_out_prev);
`endif
	if (
		( bcd_out_expected_prev[0] !== 1'bx ) && ( bcd_out_prev[0] !== bcd_out_expected_prev[0] )
		&& ((bcd_out_expected_prev[0] !== last_bcd_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[0] = bcd_out_expected_prev[0];
	end
	if (
		( bcd_out_expected_prev[1] !== 1'bx ) && ( bcd_out_prev[1] !== bcd_out_expected_prev[1] )
		&& ((bcd_out_expected_prev[1] !== last_bcd_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[1] = bcd_out_expected_prev[1];
	end
	if (
		( bcd_out_expected_prev[2] !== 1'bx ) && ( bcd_out_prev[2] !== bcd_out_expected_prev[2] )
		&& ((bcd_out_expected_prev[2] !== last_bcd_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[2] = bcd_out_expected_prev[2];
	end
	if (
		( bcd_out_expected_prev[3] !== 1'bx ) && ( bcd_out_prev[3] !== bcd_out_expected_prev[3] )
		&& ((bcd_out_expected_prev[3] !== last_bcd_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[3] = bcd_out_expected_prev[3];
	end
	if (
		( bcd_out_expected_prev[4] !== 1'bx ) && ( bcd_out_prev[4] !== bcd_out_expected_prev[4] )
		&& ((bcd_out_expected_prev[4] !== last_bcd_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[4] = bcd_out_expected_prev[4];
	end
	if (
		( bcd_out_expected_prev[5] !== 1'bx ) && ( bcd_out_prev[5] !== bcd_out_expected_prev[5] )
		&& ((bcd_out_expected_prev[5] !== last_bcd_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[5] = bcd_out_expected_prev[5];
	end
	if (
		( bcd_out_expected_prev[6] !== 1'bx ) && ( bcd_out_prev[6] !== bcd_out_expected_prev[6] )
		&& ((bcd_out_expected_prev[6] !== last_bcd_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[6] = bcd_out_expected_prev[6];
	end
	if (
		( bcd_out_expected_prev[7] !== 1'bx ) && ( bcd_out_prev[7] !== bcd_out_expected_prev[7] )
		&& ((bcd_out_expected_prev[7] !== last_bcd_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[7] = bcd_out_expected_prev[7];
	end
	if (
		( bcd_out_expected_prev[8] !== 1'bx ) && ( bcd_out_prev[8] !== bcd_out_expected_prev[8] )
		&& ((bcd_out_expected_prev[8] !== last_bcd_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[8] = bcd_out_expected_prev[8];
	end
	if (
		( bcd_out_expected_prev[9] !== 1'bx ) && ( bcd_out_prev[9] !== bcd_out_expected_prev[9] )
		&& ((bcd_out_expected_prev[9] !== last_bcd_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[9] = bcd_out_expected_prev[9];
	end
	if (
		( bcd_out_expected_prev[10] !== 1'bx ) && ( bcd_out_prev[10] !== bcd_out_expected_prev[10] )
		&& ((bcd_out_expected_prev[10] !== last_bcd_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[10] = bcd_out_expected_prev[10];
	end
	if (
		( bcd_out_expected_prev[11] !== 1'bx ) && ( bcd_out_prev[11] !== bcd_out_expected_prev[11] )
		&& ((bcd_out_expected_prev[11] !== last_bcd_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[11] = bcd_out_expected_prev[11];
	end
	if (
		( bcd_out_expected_prev[12] !== 1'bx ) && ( bcd_out_prev[12] !== bcd_out_expected_prev[12] )
		&& ((bcd_out_expected_prev[12] !== last_bcd_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[12] = bcd_out_expected_prev[12];
	end
	if (
		( bcd_out_expected_prev[13] !== 1'bx ) && ( bcd_out_prev[13] !== bcd_out_expected_prev[13] )
		&& ((bcd_out_expected_prev[13] !== last_bcd_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[13] = bcd_out_expected_prev[13];
	end
	if (
		( bcd_out_expected_prev[14] !== 1'bx ) && ( bcd_out_prev[14] !== bcd_out_expected_prev[14] )
		&& ((bcd_out_expected_prev[14] !== last_bcd_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[14] = bcd_out_expected_prev[14];
	end
	if (
		( bcd_out_expected_prev[15] !== 1'bx ) && ( bcd_out_prev[15] !== bcd_out_expected_prev[15] )
		&& ((bcd_out_expected_prev[15] !== last_bcd_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_out_expected_prev);
		$display ("     Real value = %b", bcd_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_out_exp[15] = bcd_out_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] binIN;
// wires                                               
wire [15:0] bcd_out;

wire sampler;                             

// assign statements (if any)                          
bcd i1 (
// port map - connection between master ports and signals/registers   
	.bcd_out(bcd_out),
	.binIN(binIN)
);
// binIN[ 11 ]
initial
begin
	binIN[11] = 1'b0;
end 
// binIN[ 10 ]
initial
begin
	binIN[10] = 1'b0;
	binIN[10] = #924000 1'b1;
end 
// binIN[ 9 ]
initial
begin
	binIN[9] = 1'b0;
	binIN[9] = #412000 1'b1;
	binIN[9] = #512000 1'b0;
end 
// binIN[ 8 ]
initial
begin
	binIN[8] = 1'b0;
	binIN[8] = #156000 1'b1;
	binIN[8] = #256000 1'b0;
	binIN[8] = #256000 1'b1;
	binIN[8] = #256000 1'b0;
end 
// binIN[ 7 ]
initial
begin
	binIN[7] = 1'b0;
	# 28000;
	repeat(3)
	begin
		binIN[7] = 1'b1;
		binIN[7] = #128000 1'b0;
		# 128000;
	end
	binIN[7] = 1'b1;
	binIN[7] = #128000 1'b0;
end 
// binIN[ 6 ]
initial
begin
	binIN[6] = 1'b1;
	# 28000;
	repeat(7)
	begin
		binIN[6] = 1'b0;
		binIN[6] = #64000 1'b1;
		# 64000;
	end
	binIN[6] = 1'b0;
	binIN[6] = #64000 1'b1;
end 
// binIN[ 5 ]
initial
begin
	binIN[5] = 1'b1;
	# 28000;
	repeat(15)
	begin
		binIN[5] = 1'b0;
		binIN[5] = #32000 1'b1;
		# 32000;
	end
	binIN[5] = 1'b0;
end 
// binIN[ 4 ]
initial
begin
	binIN[4] = 1'b0;
	# 12000;
	repeat(30)
	begin
		binIN[4] = 1'b1;
		binIN[4] = #16000 1'b0;
		# 16000;
	end
	binIN[4] = 1'b1;
	binIN[4] = #16000 1'b0;
end 
// binIN[ 3 ]
initial
begin
	binIN[3] = 1'b0;
	# 4000;
	repeat(62)
	begin
		binIN[3] = 1'b1;
		binIN[3] = #8000 1'b0;
		# 8000;
	end
	binIN[3] = 1'b1;
end 
// binIN[ 2 ]
always
begin
	binIN[2] = 1'b1;
	binIN[2] = #4000 1'b0;
	#4000;
end 
// binIN[ 1 ]
always
begin
	binIN[1] = 1'b0;
	binIN[1] = #2000 1'b1;
	#2000;
end 
// binIN[ 0 ]
always
begin
	binIN[0] = 1'b0;
	binIN[0] = #1000 1'b1;
	#1000;
end 

bcd_vlg_sample_tst tb_sample (
	.binIN(binIN),
	.sampler_tx(sampler)
);

bcd_vlg_check_tst tb_out(
	.bcd_out(bcd_out),
	.sampler_rx(sampler)
);
endmodule

